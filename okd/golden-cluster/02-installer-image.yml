---
# If you set a specifice okd version, that will be used. If not the automation will
# try to determine tha latest through the okd ci api

- name: update openshift client/installer and fedora-coreos image
  hosts: localhost
  vars:
    platform: openstack
    okd_ci_base_url: https://origin-release.apps.ci.l2s4.p1.openshiftapps.com
    fcos_url_prefix: https://builds.coreos.fedoraproject.org
    #okd_release: 4.5.0-0.okd-2020-10-15-235428
    #okd_release: 4.6.0-0.okd-2021-01-23-132511
    #okd_release: 4.7.0-0.okd-2021-04-24-103438
    okd_release: 4.7.0-0.okd-2021-04-24-103438
#    fcos_stream: stable
#    fcos_release: 33.20210328.3.0
    use_fcos_machine_os_from_okd_release: true

  pre_tasks:
    - include_vars: settings.yml

  tasks:
    - block:
        - name: query origin-release api for latest 4-stable version
          uri:
            url: "{{okd_ci_base_url}}/api/v1/releasestream/4-stable/latest"
            return_content: true
          register: _latest
        - name: set_fact okd_release
          set_fact:
            okd_release: "{{ _latest.json.name }}"
      when: okd_release is not defined

    - name: Get openshift client/installer for {{ okd_release }}
      command: "oc adm release extract --tools {{ okd_repo | default('quay.io/openshift/okd') }}:{{ okd_release }}"
      args:
        creates: openshift-client-linux-{{ okd_release }}.tar.gz

    - name: Update openshift client/installer to {{ okd_release }}
      unarchive:
        src: "{{ item }}"
        dest: "{{ ansible_env.HOME }}/.local/bin"
        exclude:
          - README.md
      with_items:
        - openshift-client-linux-{{ okd_release }}.tar.gz
        - openshift-install-linux-{{ okd_release }}.tar.gz

    - block:
      - name: Query origin-release api for okd machine-os fcos
        uri:
          url: "{{ okd_ci_base_url}}/releasetag/{{ okd_release }}/json"
          return_content: true
        register: _okd_release_details

      - name: Query builds coreos api for latest fcos in {{ fcos_stream | default('stable') }}
        uri:
          url: "https://builds.coreos.fedoraproject.org/streams/{{ fcos_stream | default('stable') }}.json"
          return_content: true
        register: _fcos_stream

      - name: Hack. Set temporary _fcos_release
        set_fact:
          _fcos_release: "{{ use_fcos_machine_os_from_okd_release | ternary(
            _okd_release_details.json.displayVersions['machine-os'].Version,
            _fcos_stream.json.architectures.x86_64.artifacts[platform].release
          ) }}"

      - name: Get all stream builds
        uri:
          url: "{{fcos_url_prefix}}/prod/streams/{{ stream }}/builds/builds.json"
          return_content: true
        loop_control:
          loop_var: stream
        with_items:
          - stable
          - testing-devel
          - next
        register: _builds

      - name: Find stream and release matching fcos_release {{ _fcos_release }}
        set_fact:
          _found_fcos: "{{ _builds.results | to_json | from_json | json_query(stream_release) }}"
        vars:
          stream_release: "[?json.builds[?starts_with(id, '{{ _fcos_release }}')]].{stream: stream, release: json.builds[?starts_with(id, '{{ _fcos_release }}')].id | [0]} | [0]"

      - name: "Set_fact fcos_stream: {{ _found_fcos.stream }}"
        set_fact:
          fcos_stream: "{{ _found_fcos.stream }}"
        when: fcos_stream is not defined

      - name: "set_fact fcos_release: {{ _found_fcos.release }}"
        set_fact:
          fcos_release: "{{ _found_fcos.release }}"
      when:
        - fcos_release is not defined
    - name: Gather meta on fcos {{ fcos_release }}
      uri:
        url: "{{fcos_url_prefix}}/prod/streams/{{ fcos_stream }}/builds/{{ fcos_release }}/x86_64/meta.json"
        return_content: true
      register: _fcos_meta

    - name: set facts for fcos {{ fcos_release }} meta
      set_fact:
        fcos_file_xz:           "{{ _fcos_meta.json.images[platform].path }}"
        fcos_file_xz_sha256:    "{{ _fcos_meta.json.images[platform].sha256 }}"
        fcos_file_qcow2:        "{{ _fcos_meta.json.images[platform].path | regex_replace('\\.xz$', '')}}"
        fcos_file_qcow2_sha256: "{{ _fcos_meta.json.images[platform]['uncompressed-sha256'] }}"
        fcos_file_raw:          "{{ _fcos_meta.json.images[platform].path | regex_replace('\\.qcow2\\.xz$', '.raw') }}"
    
    - name: check for decompressed {{ fcos_file_qcow2 }}
      stat:
        path: "{{ ansible_env.PWD }}/{{ fcos_file_qcow2 }}"
      register: _decompressed
    
    - name: Download {{ fcos_file_xz }}
      get_url:
        url: "https://builds.coreos.fedoraproject.org/prod/streams/{{ fcos_stream }}/builds/{{ fcos_release }}/x86_64/{{ fcos_file_xz }}"
        dest: "{{ ansible_env.PWD }}/{{ fcos_file_xz }}"
        checksum: "sha256:{{ fcos_file_xz_sha256 }}"
      when: _decompressed.stat.exists == false
    
    - name: Decompress {{ fcos_file_xz }} to {{ fcos_file_qcow2 }}
      command: "xz --decompress {{ ansible_env.PWD }}/{{ fcos_file_xz }}"
      args:
        creates: "{{ ansible_env.PWD }}/{{ fcos_file_qcow2 }}"
    
    # https://docs.ceph.com/docs/master/rbd/qemu-rbd/
    # Important The raw data format is really the only sensible format option to use with RBD. Technically, you could use other
    # QEMU-supported formats (such as qcow2 or vmdk), but doing so would add additional overhead, and would also render the
    # volume unsafe for virtual machine live migration when caching (see below) is enabled.
    - name: Convert {{ fcos_file_qcow2 }} to {{ fcos_file_raw }}
      command: >-
        qemu-img convert -f qcow2 -O raw \
        {{ ansible_env.PWD }}//{{ fcos_file_qcow2 }}
        {{ ansible_env.PWD }}//{{ fcos_file_raw }}
      args:
        creates: "{{ ansible_env.PWD }}//{{ fcos_file_raw }}"
      when: to_ceph | default(false)
    
    - name: Upload fedora-coreos {{ fcos_release }}
      os_image:
        filename: "{{ ansible_env.PWD }}/{{ to_ceph | default(false) | ternary(fcos_file_raw, fcos_file_qcow2) }}"
        name: "fedora-coreos-{{ fcos_release }}-openstack.x86_64"
        disk_format: "{{ (to_ceph | default(false)) | ternary('raw', 'qcow2') }}"
        is_public: "{{ is_public | default(false) }}"
        #checksum: "{{ (to_ceph | default(false)) | ternary(omit, fcos_qcow2_sha256) }}"
        properties:
          os_distro: fedora-coreos
          hw_machine_type: pc

    - name: Update fcos_image in settings.yml
      replace:
        path: settings.yml
        regexp: "^okd_fcos_image: .*$"
        replace: "okd_fcos_image: fedora-coreos-{{ fcos_release }}-{{ platform }}.x86_64"
