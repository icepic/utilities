---
# If you set a specifice okd version, that will be used. If not the automation will
# try to determine tha latest through the okd ci api

- name: update openshift client/installer and fedora-coreos image
  hosts: localhost
  vars:
    platform: openstack
    okd_ci_base_url: https://origin-release.apps.ci.l2s4.p1.openshiftapps.com

  pre_tasks:
    - include_vars: settings.yml

  tasks:
    - block:
        - name: query origin-release api for latest 4-stable version
          uri:
            url: "{{okd_ci_base_url}}/api/v1/releasestream/4-stable/latest"
            return_content: true
          register: _latest
        - name: set_fact okd_release
          set_fact:
            okd_release: "{{ _latest.json.name }}"
      when: okd_release is not defined

    - name: Get openshift client/installer for {{ okd_release }}
      command: "oc adm release extract --tools {{ okd_repo | default('quay.io/openshift/okd') }}:{{ okd_release }}"
      args:
        creates: openshift-client-linux-{{ okd_release }}.tar.gz

    - name: Update openshift client/installer to {{ okd_release }}
      unarchive:
        src: "{{ item }}"
        dest: "{{ ansible_env.HOME }}/.local/bin"
        exclude:
          - README.md
      with_items:
        - openshift-client-linux-{{ okd_release }}.tar.gz
        - openshift-install-linux-{{ okd_release }}.tar.gz

    - name: Get fcos meta json string from installer
      shell: openshift-install coreos print-stream-json|jq '.architectures.x86_64.artifacts.openstack.formats."qcow2.xz".disk'
      register: _fcos_meta_string

    - name: Set fact for fcos meta
      set_fact:
        _fcos_meta: "{{ _fcos_meta_string.stdout |from_json }}"

    - name: Set fcos release from installer
      shell: openshift-install coreos print-stream-json|jq -r '.architectures.x86_64.artifacts.openstack.release'
      register: _fcos_release

    - name: Set fact for fcos release
      set_fact:
        fcos_release: "{{ _fcos_release.stdout }}"


    - name: set facts for fcos {{ _fcos_release }} meta
      set_fact:
        fcos_file_xz_sha256: "{{ _fcos_meta.sha256}}"
        fcos_file_location: "{{ _fcos_meta.location}}"
        fcos_file_xz: "fedora-coreos-{{_fcos_release.stdout }}-openstack.x86_64.qcow2.xz"
        fcos_file_qcow2: "fedora-coreos-{{ fcos_release }}-openstack.x86_64.qcow2"
    
    - name: check for decompressed {{ fcos_file_qcow2 }}
      stat:
        path: "{{ ansible_env.PWD }}/{{ fcos_file_qcow2 }}"
      register: _decompressed
    
    - name: Download {{ fcos_file_xz }}
      get_url:
        url: " {{fcos_file_location }}"
        dest: "{{ ansible_env.PWD }}/{{ fcos_file_xz }}"
        checksum: "sha256:{{ fcos_file_xz_sha256 }}"
      when: _decompressed.stat.exists == false
    
    - name: Decompress {{ fcos_file_xz }} to {{ fcos_file_qcow2 }}
      command: "xz --decompress {{ ansible_env.PWD }}/{{ fcos_file_xz }}"
      args:
        creates: "{{ ansible_env.PWD }}/{{ fcos_file_qcow2 }}"
    
    
    - name: Upload fedora-coreos {{ fcos_release }}
      os_image:
        filename: "{{ ansible_env.PWD }}/{{ fcos_file_qcow2 }}"
        name: "fedora-coreos-{{ fcos_release }}-openstack.x86_64"
        disk_format: "{{ (to_ceph | default(false)) | ternary('raw', 'qcow2') }}"
        is_public: "{{ is_public | default(false) }}"
        #checksum: "{{ (to_ceph | default(false)) | ternary(omit, fcos_qcow2_sha256) }}"
        properties:
          os_distro: fedora-coreos
          hw_machine_type: pc

    - name: Update fcos_image in settings.yml
      replace:
        path: settings.yml
        regexp: "^okd_fcos_image: .*$"
        replace: "okd_fcos_image: fedora-coreos-{{ fcos_release }}-openstack.x86_64"
